Brownie comes with pre-configured networks which are addressable.
You can view the list of available networks through "brownie networks list".

Networks which are listed under the tab "Development" are all temporary networks.
After the scripts completes, these networks are erased and spun up fresh when a new script is executed.

Networks under "Ethereum" are persisted.

NOTE: For Infura, the PROJECT_ID is now called the API-Key under "ENDPOINTS" of the projects.
Deploying to the testnet:
brownie run scripts/deploy.py --network goerli

Once deployed to the network, everything that is deployed will be saved in the build/deployments folder for future references like contract addresses etc.
Changes to local blockchains will not be saved here.

Brownie comsole 
-> brownie console in CLI
here we can directly interact with the deployed contracts and addresses
-> it's essentially an interactive python shell with browny in the background


Ã¤ Telling brownie external dependencies by including this into the brownie-config.yaml file
dependencies:
# - <organization/repo>@<version>
- smartcontractkit/chainlink-brownie-contracts@1.1.1
compiler:
  solc:
    remappings:
      - '@chainlink=smartcontractkit/chainlink-brownie-contracts@1.1.1'

This allows for the access to all elements in this github repo.
Furthermore, we tell the compiler that @chainlink refers to the github repo above through a remapping.

Brownie does also have a connection to etherscan.io, where one can process the verification of the smart contracts
in a programmatic way.
This is for publishing the source code of the smart contract.


--- Mocking Oracle Feeds on Local Chains ---
Instead of referencing an external oracle source, one can deploy a mock contract feed on the local chain to 
receive a respective mock pricing feed for testing.
-> creating a new test folder in the contracts folder - this is typically where the mock contracts are stored in the brownie folder structure.
-> For ready to use mock oracle smart contracts, one can use chainlink-mix as a good reference.
https://github.com/smartcontractkit/chainlink-mix