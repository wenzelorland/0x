Brownie comes with pre-configured networks which are addressable.
You can view the list of available networks through "brownie networks list".

Networks which are listed under the tab "Development" are all temporary networks.
After the scripts completes, these networks are erased and spun up fresh when a new script is executed.

Networks under "Ethereum" are persisted.

NOTE: For Infura, the PROJECT_ID is now called the API-Key under "ENDPOINTS" of the projects.
Deploying to the testnet:
brownie run scripts/deploy.py --network goerli

Once deployed to the network, everything that is deployed will be saved in the build/deployments folder for future references like contract addresses etc.
Changes to local blockchains will not be saved here.

Brownie comsole 
-> brownie console in CLI
here we can directly interact with the deployed contracts and addresses
-> it's essentially an interactive python shell with browny in the background

Lessong_6

Ã¤ Telling brownie external dependencies by including this into the brownie-config.yaml file
dependencies:
# - <organization/repo>@<version>
- smartcontractkit/chainlink-brownie-contracts@1.1.1
compiler:
  solc:
    remappings:
      - '@chainlink=smartcontractkit/chainlink-brownie-contracts@1.1.1'

This allows for the access to all elements in this github repo.
Furthermore, we tell the compiler that @chainlink refers to the github repo above through a remapping.

Brownie does also have a connection to etherscan.io, where one can process the verification of the smart contracts
in a programmatic way.
This is for publishing the source code of the smart contract.


--- Mocking Oracle Feeds on Local Chains ---
Instead of referencing an external oracle source, one can deploy a mock contract feed on the local chain to 
receive a respective mock pricing feed for testing.
-> creating a new test folder in the contracts folder - this is typically where the mock contracts are stored in the brownie folder structure.
-> For ready to use mock oracle smart contracts, one can use chainlink-mix as a good reference.
https://github.com/smartcontractkit/chainlink-mix


### Attaching a local Ganache instance to Brownie ###
brownie networks list

::: let brownie remeber deployments to a ganache chain :::
brownie networks add Ethereum ganache-local host=http://127.0.0.1:7545 chainid=1337
or whatever parameters are specified for the local ganache blockchain.
To access this chain, we need to tell brownie which network to use
--> brownie run scripts/deploy.py --network ganache-local

For this we also need to amend the helpful_scripts.py, so that we expand the definition of "development" networks.
Since we have added the local blockchain no to the Development section of the networks, Brownie will actually save all interactions with contracts
in the deployment folder.
In case the local blockchain instance is deleted, the deployments folder referencing this chain needs to be deleted, as one will not be able to interact
with these contracts anymore.

Generally, in the networks section of the brownie-config.yaml the default is set to : development, i.e. when no --network flag is set, brownie will default and spun up a development chain
One can adjust this to another network, so that the default case will be adjusted.

### Mainnet Forking ### 
A forked blockchain takes an exact copy of an existing blockchain. The advantage here is that the forked blockchain already comes with all 
the contracts deployed of the to be forked blockchain, including the Price feed contracts, transaction data and all protocol contracts.
This is why it is perfectly suited to use a forked Mainnet for simulation.

### Creating Own custom forked network ###
# Forking from infura has some performance issues though
brownie networks add development mainnet-fork-dev cmd=ganache-cli host=http://127.0.0.1 fork='https://mainnet.infura.io/v3/$WEB3_INFURA_PROJECT_ID' accounts=10 mnemonic=brownie port=7545
# Forking from alchemy
brownie networks add development mainnet-fork-dev cmd=ganache-cli host=http://127.0.0.1 fork='https://eth-mainnet.g.alchemy.com/v2/$WEB3_ALCHEMY_API_KEY' accounts=10 mnemonic=brownie port=7545
-> note: make sure the port you are using is the same as in the ganache GUI, when starting up ganache

### Test Deployment ###
Where should the test run?
1. Brownie Ganache Chain with Mocks : Should always pass.
2. Testnet: Always should pass (but only for Integeration testing)
3. Brownie mainnet-fork: Optional to pass
4. Custom mainnet-fork: Optional to pass
5. Self/Local Ganache: Not necessary, but good for tinkering
